// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER & AUTHENTICATION
// ============================================================================

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  passwordHash  String
  name          String
  role          Role      @default(STUDENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  teacherProfile  Teacher?
  studentProfile  Student?
  accounts        Account[]
  sessions        Session[]
}

enum Role {
  TEACHER
  STUDENT
  ADMIN
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================================================================
// USER PROFILES
// ============================================================================

model Teacher {
  id        String   @id @default(cuid())
  userId    String   @unique
  school    String?
  bio       String?  @db.Text

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pdfs      PDF[]
  games     Game[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id        String   @id @default(cuid())
  userId    String   @unique
  grade     String?

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameSessions  GameSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ============================================================================
// PDF & CONTENT PROCESSING
// ============================================================================

model PDF {
  id              String    @id @default(cuid())
  teacherId       String
  filename        String
  blobUrl         String    // Vercel Blob storage URL
  fileSize        Int
  mimeType        String    @default("application/pdf")
  uploadedAt      DateTime  @default(now())

  teacher           Teacher             @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  processedContent  ProcessedContent?

  @@index([teacherId])
}

model ProcessedContent {
  id            String   @id @default(cuid())
  pdfId         String   @unique
  extractedText String   @db.Text
  textLength    Int
  processedAt   DateTime @default(now())

  pdf     PDF     @relation(fields: [pdfId], references: [id], onDelete: Cascade)
  quizzes Quiz[]

  @@index([pdfId])
}

// ============================================================================
// QUIZ & GAME MANAGEMENT
// ============================================================================

model Quiz {
  id                  String   @id @default(cuid())
  processedContentId  String
  title               String?
  numQuestions        Int      @default(5)
  quizJson            Json     // Store the quiz questions/answers as JSON
  createdAt           DateTime @default(now())

  processedContent  ProcessedContent  @relation(fields: [processedContentId], references: [id], onDelete: Cascade)
  games             Game[]            // Legacy: for backwards compatibility
  gameQuizzes       GameQuiz[]        // New: many-to-many relationship

  @@index([processedContentId])
}

model Game {
  id          String    @id @default(cuid())
  quizId      String?   // Legacy: made optional for backwards compatibility
  teacherId   String
  title       String
  description String?   @db.Text
  shareCode   String    @unique // Short code for joining (e.g., "ABC123")
  qrCodeUrl   String?   // Vercel Blob URL for QR code image
  active      Boolean   @default(true)
  maxAttempts Int       @default(1) // How many times can a student play
  timeLimit   Int?      // Time limit in seconds (optional)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  quiz          Quiz?           @relation(fields: [quizId], references: [id], onDelete: Cascade) // Legacy
  teacher       Teacher         @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  gameSessions  GameSession[]
  gameQuizzes   GameQuiz[]      // New: many-to-many relationship

  @@index([teacherId])
  @@index([shareCode])
  @@index([active])
}

// Junction table for many-to-many Game-Quiz relationship
model GameQuiz {
  id        String   @id @default(cuid())
  gameId    String
  quizId    String
  order     Int      @default(0) // Order of quiz in the game
  createdAt DateTime @default(now())

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([gameId, quizId])
  @@index([gameId])
  @@index([quizId])
}

model GameSession {
  id          String    @id @default(cuid())
  gameId      String
  studentId   String
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  score       Int?
  totalQuestions Int?
  correctAnswers Int?
  timeSpent   Int?      // Time spent in seconds
  answersJson Json?     // Store student answers if needed for review

  game    Game    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([gameId, studentId])
  @@index([gameId])
  @@index([studentId])
}
